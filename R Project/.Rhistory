connStr <- "Driver=SQL Server;Server=localhost;Database=ohl_data;Trusted_Connection = Yes" # win auth
sqlShareDir <- paste("D:\\R_SerializationDir\\", Sys.getenv("USERNAME"), sep = "")
sqlWait <- TRUE
sqlConsoleOutput <- FALSE
cc <- RxInSqlServer(connectionString = connStr, shareDir = sqlShareDir, wait = sqlWait, consoleOutput = sqlConsoleOutput)
rxSetComputeContext(cc)
sql = "SELECT * FROM OHLData";
data = RxSqlServerData(sqlQuery = sql, connectionString = connStr, rowsPerRead = 5000)
rxGetVarInfo(data = data)
start.time <- proc.time()
rxSummary(~AidName, data = data)
used.time <- proc.time() - start.time
print(paste("It takes CPU Time=", round(used.time[1] + used.time[2], 2), " seconds, Elapsed Time=",
            round(used.time[3], 2), " seconds to summarize the data.", sep = ""))
info=rxGetVarInfo(data = data)
data$L500=as.numeric(data$L500)
info$L5
data
dataset = rxImport(data);
mode(dataset)
typeof(dataset)
class(dataset)
l500numericCheck = apply(dataset, c("L500"), is.numeric);
summary(dataset)
dataset$n
dataset$names
dataset$AidShapeID[[1]]
?applz
?apply
test=c(1,2,3,4,5)
dataset$L500[1:10]
l500numericCheck = apply(dataset[1:10], 1, is.numeric);
l
l500numericCheck
dataset[1:10]
l500numericCheck = apply(dataset[1:10], 2, is.numeric);
summary(l500numericCheck)
length(l500numericCheck)
mode(l500numericCheck)
class(l500numericCheck)
typeof(l500numericCheck)
head(l500numericCheck)
length(l500numericCheck[[1]])
l500numericCheck[[1]]
l500numericCheck = apply(dataset[1:10], 1, is.numeric)
length(l500numericCheck[[1]])
head(l500numericCheck)
typeof(l500numericCheck)
summary(l500numericCheck)
l500numericCheck = apply(dataset[1], 1, is.numeric)
l500numericCheck = apply(dataset[1:3], 1, is.numeric)
l500numericCheck = apply(dataset[1:3], c(1, 2), is.numeric);
length(l500numericCheck)
length(l500numericCheck[[1]])
head(l500numericCheck)
all(is.numeric(dataset$L500))
all(is.numeric(dataset$OHLDataID))
summary(dataset)
g='f'
g='1'
is.numeric(g)
summary(dataset)
head(dataset[9:22])
length(dataset[9:22])
num[, 9:22] = apply(dataset[, 9:22], 2, function(x) as.numeric(as.character(x)));
num = apply(dataset[, 9:22], 2, function(x) as.numeric(as.character(x)));
summary(num)
as.numeric(g)
g="e"
as.numeric(g)
sum(is.na(num[[0]]))
num[[0]]
sum(is.na(num[[1]]))
num[[1]]
length(num)
length(num[[1]])
num[1]
num[1,1]
num[1,2]
typeof(num)
class(num)
mode(num)
num = lapply(dataset[, 9:22], 2, function(x) as.numeric(as.character(x)));
num = lapply(dataset[, 9:22], function(x) as.numeric(as.character(x)));
summary(num)
sum(summary(num))
for (i in 1:length(num))
    sum(is.na(num[[i]]))
na_s=[]
nas=list()
for (i in 1:length(num))
   nas[i]=sum(is.na(num[[i]]))
nas
all(nas==0)
nas
vignette("ggplot2-specs")
p = ggplot(audiograms) +
    geom_density(aes(L500, colour = "L500"), adjust = 15) +
    geom_density(aes(L1k, colour = "L1k"), adjust = 15) +
    geom_density(aes(L2k, colour = "L2k"), adjust = 15) +
    geom_density(aes(L3k, colour = "L3k"), adjust = 15) +
    geom_density(aes(L4k, colour = "L4k"), adjust = 15) +
    geom_density(aes(L6k, colour = "L6k"), adjust = 15) +
    geom_density(aes(L8k, colour = "L8k"), adjust = 15) +
    labs(x = "Frekvencija [Hz]", y = "Gustoća", colour = NULL, title = "Distribucija vrijednosti audiograma po svakoj od frekvencija") +
+    xlim(-10, 50);
p
library(ggplot2)
p = ggplot(audiograms) +
    geom_density(aes(L500, colour = "L500"), adjust = 15) +
    geom_density(aes(L1k, colour = "L1k"), adjust = 15) +
    geom_density(aes(L2k, colour = "L2k"), adjust = 15) +
    geom_density(aes(L3k, colour = "L3k"), adjust = 15) +
    geom_density(aes(L4k, colour = "L4k"), adjust = 15) +
    geom_density(aes(L6k, colour = "L6k"), adjust = 15) +
    geom_density(aes(L8k, colour = "L8k"), adjust = 15) +
    labs(x = "Frekvencija [Hz]", y = "Gustoća", colour = NULL, title = "Distribucija vrijednosti audiograma po svakoj od frekvencija") +
+    xlim(-10, 50);
p = ggplot(audiograms) +
    geom_density(aes(L500, colour = "L500"), adjust = 15) +
    geom_density(aes(L1k, colour = "L1k"), adjust = 15) +
    geom_density(aes(L2k, colour = "L2k"), adjust = 15) +
    geom_density(aes(L3k, colour = "L3k"), adjust = 15) +
    geom_density(aes(L4k, colour = "L4k"), adjust = 15) +
    geom_density(aes(L6k, colour = "L6k"), adjust = 15) +
    geom_density(aes(L8k, colour = "L8k"), adjust = 15) +
    labs(x = "Frekvencija [Hz]", y = "Gustoća", colour = NULL, title = "Distribucija vrijednosti audiograma po svakoj od frekvencija") +
    xlim(-10, 50);
p
p = ggplot(audiograms) +
    geom_density(aes(L500, colour = "L500"), adjust = 15) +
    geom_density(aes(L1k, colour = "L1k"), adjust = 15) +
    geom_density(aes(L2k, colour = "L2k"), adjust = 15) +
    geom_density(aes(L3k, colour = "L3k"), adjust = 15) +
    geom_density(aes(L4k, colour = "L4k"), adjust = 15) +
    geom_density(aes(L6k, colour = "L6k"), adjust = 15) +
    geom_density(aes(L8k, colour = "L8k"), adjust = 15) +
    labs(x = "Decibeli [Db]", y = "Gustoća", colour = NULL, title = "Distribucija vrijednosti audiograma po svakoj od frekvencija") +
    xlim(-10, 50);
p
p
ggsave("dist.png")
det(correlation[1:7, 1:7]) 
round()det(correlation[8:14, 8:14]) 
# test na normalnu distribuciju
det(correlation[8:14, 8:14]) 
det(correlation[8:14, 8:14]) > 0.00001
stats::bartlett.test(correlation)
stats::bartlett.test(list(correlation))
list(correlation)
n <- nrow(lCorr)
lCorr=correlation[1:7, 1:7] # za lijevo uho
rCorr=correlation[8:14, 8:14] # za desno uho
n <- nrow(lCorr)
p <- ncol(lCorr)
chi2 <- -(n - 1 - (2 * p + 5) / 6) * log(det(lCorr))
ddl <- p * (p - 1) / 2
print(chi2)
print(ddl)
print(pchisq(chi2, ddl, lower.tail = F))
audiograms[1:8]
head(audiograms[1:8])
n <- nrow(audiograms[1:7])
p <- ncol(audiograms[1:7])
chi2 <- -(n - 1 - (2 * p + 5) / 6) * log(det(lCorr))
ddl <- p * (p - 1) / 2
print(chi2)
print(ddl)
print(pchisq(chi2, ddl, lower.tail = F)) # p-value za provjeru da li je Bartlettov test statistički važan. U ovom slučaju jeste, međutim to je zbog velikog broja varijabli
library(ggpubr)
ggqqplot(audiograms$L500)
ggqqplot(audiograms,L500)
ggqqplot(audiograms,"L500")
ggplot(audiograms, aes(sample = L500)) + stat_qq()
ggplot(audiograms, aes(sample = L1k)) + stat_qq()
ggplot(audiograms, aes(sample = L500)) + stat_qq(distribution = stats::qnorm(25,25))
qno
rm(bigNumbersPercentage, envir = as.environment(".GlobalEnv"))
params=list(mean=25, sd=25)
ggplot(audiograms, aes(sample = L500)) + stat_qq(dparams = params)
ggplot(audiograms, aes(sample = L500)) + stat_qq(dparams = params)plotcorr(correlation[1:7, 1:7], col = rgb(colorfun((correlation[1:7, 1:7] + 1) / 2), maxColorValue = 255), mar = c(0.1, 0.1, 0.1, 0.1))
plotcorr(correlation[1:7, 1:7], col = rgb(colorfun((correlation[1:7, 1:7] + 1) / 2), maxColorValue = 255), mar = c(0.1, 0.1, 0.1, 0.1))
ellipse::plotcorr(correlation[1:7, 1:7], col = rgb(colorfun((correlation[1:7, 1:7] + 1) / 2), maxColorValue = 255), mar = c(0.1, 0.1, 0.1, 0.1))
library("RevoScaleR")
# uspostavljanje konekcije na bazu
# connStr <- "Driver=SQL Server;Server=localhost;Database=ohl_data;Uid=sa;Pwd=19Zeljo21" #sql auth
connStr <- "Driver=SQL Server;Server=localhost;Database=ohl_data;Trusted_Connection = Yes" # win auth
sqlShareDir <- paste("D:\\R_SerializationDir\\", Sys.getenv("USERNAME"), sep = "")
sqlWait <- TRUE
sqlConsoleOutput <- FALSE
cc <- RxInSqlServer(connectionString = connStr, shareDir = sqlShareDir, wait = sqlWait, consoleOutput = sqlConsoleOutput)
rxSetComputeContext(cc)
sql = "SELECT * FROM OHLData";
data = RxSqlServerData(sqlQuery = sql, connectionString = connStr, rowsPerRead = 5000)
info = rxGetVarInfo(data = data)
start.time <- proc.time()
rxSummary(~AidName, data = data)
used.time <- proc.time() - start.time
print(paste("Vrijeme potrebno procesoru da sumarizira podatke: ", round(used.time[1] + used.time[2], 2), "s, ukupno vrijeme: ", round(used.time[3], 2), "s.", sep = ""))
dataset = rxImport(data);
audiograms = lapply(dataset[, 9:22], function(x) as.numeric(as.character(x)));
audiograms = data.frame(audiograms);
nas = list()
for (i in 1:length(audiograms))
    nas[i] = sum(is.na(audiograms[[i]]))
# provjera uspješnosti konverzije
all(nas == 0)
rm(info, envir = as.environment(".GlobalEnv"))
numberOfMins = lapply(audiograms, function(x) sum(x == min(x)));
numberOfMaximums = lapply(audiograms, function(x) sum(x == max(x)));
numberOfNegNumbers = lapply(audiograms, function(x) sum(x < 0));
numberOfBigNumbers = lapply(audiograms, function(x) sum(x > 100));
library(ggplot2)
numberOfMins = data.frame(sapply(numberOfMins, c))
names(numberOfMins) = 'mins'
ggplot(numberOfMins, aes(row.names(numberOfMins), mins)) + geom_bar(stat = "identity", fill = "#581845") + labs(x = "", y = "", title = "Br. minimuma u svakoj od varijabli audiograma", subtitle = "Br. vrijednosti: 1 114 966");
numberOfMaximums = data.frame(sapply(numberOfMaximums, c))
names(numberOfMaximums) = 'maximums'
ggplot(numberOfMaximums, aes(row.names(numberOfMaximums), maximums)) + geom_bar(stat = "identity", fill = "#581845") + labs(x = "", y = "", title = "Br. maksimuma u svakoj od varijabli audiograma", subtitle = "Br. vrijednosti: 1 114 966");
correlation = cor(audiograms, use = "everything", method = "pearson")
lCorr=correlation[1:7, 1:7] # za lijevo uho
rCorr=correlation[8:14, 8:14] # za desno uho
colorfun <- colorRamp(c("#CC0000", "white", "#3366CC"), space = "Lab")
ellipse::plotcorr(correlation[1:7, 1:7], col = rgb(colorfun((correlation[1:7, 1:7] + 1) / 2), maxColorValue = 255), mar = c(0.1, 0.1, 0.1, 0.1))
colorfun <- colorRamp(c("red", "white", "#3366CC"), space = "Lab")
ellipse::plotcorr(correlation[1:7, 1:7], col = rgb(colorfun((correlation[1:7, 1:7] + 1) / 2), maxColorValue = 255), mar = c(0.1, 0.1, 0.1, 0.1))
colorfun <- colorRamp(c("red", "white", "blue"), space = "Lab")
ellipse::plotcorr(correlation[1:7, 1:7], col = rgb(colorfun((correlation[1:7, 1:7] + 1) / 2), maxColorValue = 255), mar = c(0.1, 0.1, 0.1, 0.1))
ggplot(audiograms, aes(sample = L500)) + stat_qq(dparams = params)
params = list(mean = 25, sd = 25);
ggplot(audiograms, aes(sample = L500)) + stat_qq(dparams = params)
ggplot(audiograms, aes(L500)) + geom_histogram(binwidth = 20)
ggplot(audiograms, aes(L500)) + geom_histogram(binwidth = 20) + xlim(-Inf, 100)
ggplot(audiograms, aes(L500)) + geom_histogram(binwidth = 20) + xlim(0, 100)
ggplot(audiograms, aes(L500)) + geom_histogram(binwidth = 5) + xlim(0, 100) 
ggplot(audiograms, aes(L500)) + geom_histogram(binwidth = 5) + xlim(0, 50) 
library(dplyr)
bezOutliera = mutate_if(audiograms, x == 999, NA)
function is.maximum(x) {
return x == 999;
}
function isMaximum(x) {
return x == 999;
}
isMaximum=function(x) {
return x == 999;
}
isMaximum=function(x) {
x == 999;
}
isMaximum(4)
isMaximum(999)
bezOutliera = mutate_if(audiograms, function(x) x == 999, NA)
bezOutliera = mutate_if(audiograms, isMaximum, NA)
bezOutliera = mutate_if(audiograms, isMaximum, function(x) x = NA)
library(outlier)
library(outliers)
library("outliers")
bezOutliera = lapply(audiograms, function(x) { lapply(x, function(y) { if (y == 999) y = NA }) })
bezOutliera = data.frame(bezOutliera)
bezOutliera2 = data.frame(bezOutliera)
bezOutliera = as.data.frame(bezOutliera)
bezOutliera = as.data.frame(bezOutliera, row.names(bezOutliera))
audiograms = lapply(dataset[, 9:22], function(x) as.numeric(as.character(x)));
class(audiograms$L1k)
mode(audiograms$
     L1k
     )
data.table::rbindlist(my_list)
bezOutliera = lapply(audiograms, function(x) { sapply(x, function(y) { if (y == 999) y = NA else y}) })
class(bezOutliera$L1k)
bezOutliera = data.frame(bezOutliera)
audiograms = data.frame(audiograms);
head(bezOutliera)
ggplot(bezOutliera) + geom_histogram(aes(L500))
sum(bezOutliera$L500 == 999)
sum(bezOutliera$L500 == 0)
summary(bezOutliera$L500)
bezOutliera = data.frame(lapply(audiograms, function(x) { sapply(x, function(y) { if (y > 500) y = NA else y}) }))
summary(bezOutliera$L500)
sum(bezOutliera$L500 == 100)
ggplot(bezOutliera) + geom_histogram(aes(L500))
sd(bezOutliera$L500, na.rm = TRUE)
ggplot(audiograms, aes(L500)) + geom_histogram(binwidth = 5) + xlim(0, 50)
sd=sd(bezOutliera$L500, na.rm = TRUE)
mean=mean(bezOutliera$L500, na.rm = TRUE)
ggplot(audiograms, aes(L500)) + geom_qq(dparams = params)
ggplot(audiograms, aes(L500)) + geom_qq(dparams = params, na.rm = TRUE)
params$
    mean = mean;
params$sd=sd
ggplot(bezOutliera) + geom_qq(aes(L500))
ggplot(audiograms) + geom_qq(aes(L500))
ggplot(audiograms, aes(sample = L500)) + stat_qq(dparams = params)
params
ggplot(bezOutliera, aes(sample = L500)) + stat_qq(dparams = params)
ggplot(bezOutliera, aes(sample = L500)) + stat_qq(dparams = list(mean,sd))
ggplot(bezOutliera) + stat_qq(aes(sample = L500), dparams = params)
p2 = ggplot(bezOutliera) +
    stat_qq(aes(sample = L500), dparams = params) +
    stat_qq(aes(sample = L1k), dparams = params) +
    stat_qq(aes(sample = L2k), dparams = params)
+ stat_qq(aes(sample = L3k), dparams = params)
+ stat_qq(aes(sample = L4k), dparams = params)
+ stat_qq(aes(sample = L6k), dparams = params)
+ stat_qq(aes(sample = L8k), dparams = params);
p2 = ggplot(bezOutliera)
+ stat_qq(aes(sample = L500), dparams = list(mean(L500), sd(L500)))
+ stat_qq(aes(sample = L1k), dparams = list(mean(L1k), sd(L1k)))
+ stat_qq(aes(sample = L2k), dparams = list(mean(L2k), sd(L2k)))
p2 = ggplot(bezOutliera)
+ stat_qq(aes(sample = L500), dparams = list(mean(bezOutliera$L500), sd(bezOutliera$L500)))
+ stat_qq(aes(sample = L1k), dparams = list(mean(bezOutliera$L1k), sd(bezOutliera$L1k)))
p2 = ggplot(bezOutliera)
+ stat_qq(aes(sample = L500), dparams = list(mean(bezOutliera$L500), sd(bezOutliera$L500)))
p2 = ggplot(bezOutliera)
+ stat_qq(aes(sample = L500), dparams = params1)
params1 = list(mean(bezOutliera$L500), sd(bezOutliera$L500))
params3 = list(mean(bezOutliera$L1k), sd(bezOutliera$L1k))
params4 = list(mean(bezOutliera$L2k), sd(bezOutliera$L2k))
params5 = list(mean(bezOutliera$L3k), sd(bezOutliera$L3k))
params6 = list(mean(bezOutliera$L4k), sd(bezOutliera$L4k))
params7 = list(mean(bezOutliera$L6k), sd(bezOutliera$L6k))
params8 = list(mean(bezOutliera$L8k), sd(bezOutliera$L8k))
p2 = ggplot(bezOutliera)
+ stat_qq(aes(sample = L500), dparams = params1)
params1
mean(bezOutliera$L500)
summary(bezOutliera$L500)
mean(bezOutliera$L500, na.rm = TRUE)
params1 = list(mean(bezOutliera$L500, na.rm = TRUE), sd(bezOutliera$L500, na.rm = TRUE))
params3 = list(mean(bezOutliera$L1k, na.rm = TRUE), sd(bezOutliera$L1k, na.rm = TRUE))
params4 = list(mean(bezOutliera$L2k, na.rm = TRUE), sd(bezOutliera$L2k, na.rm = TRUE))
params5 = list(mean(bezOutliera$L3k, na.rm = TRUE), sd(bezOutliera$L3k, na.rm = TRUE))
params6 = list(mean(bezOutliera$L4k, na.rm = TRUE), sd(bezOutliera$L4k, na.rm = TRUE))
params7 = list(mean(bezOutliera$L6k, na.rm = TRUE), sd(bezOutliera$L6k, na.rm = TRUE))
params8 = list(mean(bezOutliera$L8k, na.rm = TRUE), sd(bezOutliera$L8k, na.rm = TRUE))
params1
p2 = ggplot(bezOutliera)
+ stat_qq(aes(sample = L500, colour = "L500"), dparams = params1)
+ stat_qq(aes(sample = L1k, colour = "L1k"), dparams = params3)
+ stat_qq(aes(sample = L2k, colour = "L2k"), dparams = params4)
+ stat_qq(aes(sample = L3k, colour = "L3k"), dparams = params5)
+ stat_qq(aes(sample = L4k, colour = "L4k"), dparams = params6)
p2 = ggplot(bezOutliera)
+ stat_qq(aes(sample = L500, colour = "L500"), dparams = params1)
p2 = ggplot(bezOutliera)
+ stat_qq(aes(sample = L500, colour = "L500"), dparams = params1, na.rm = TRUE)
p2 = ggplot(bezOutliera) +
stat_qq(aes(sample = L500, colour = "L500"), dparams = params1, na.rm = TRUE)
p2 = ggplot(bezOutliera) +
    stat_qq(aes(sample = L500, colour = "L500"), dparams = params1, na.rm = TRUE) +
    stat_qq(aes(sample = L1k, colour = "L1k"), dparams = params3, na.rm = TRUE) +
    stat_qq(aes(sample = L2k, colour = "L2k"), dparams = params4, na.rm = TRUE) +
    stat_qq(aes(sample = L3k, colour = "L3k"), dparams = params5, na.rm = TRUE) +
    stat_qq(aes(sample = L4k, colour = "L4k"), dparams = params6, na.rm = TRUE) +
    stat_qq(aes(sample = L6k, colour = "L6k"), dparams = params7, na.rm = TRUE) +
    stat_qq(aes(sample = L8k, colour = "L8k"), dparams = params8, na.rm = TRUE);
p2
p1 = ggplot(audiograms) +
    geom_density(aes(L500, colour = "L500"), adjust = 15) +
    geom_density(aes(L1k, colour = "L1k"), adjust = 15) +
    geom_density(aes(L2k, colour = "L2k"), adjust = 15) +
    geom_density(aes(L3k, colour = "L3k"), adjust = 15) +
    geom_density(aes(L4k, colour = "L4k"), adjust = 15) +
    geom_density(aes(L6k, colour = "L6k"), adjust = 15) +
    geom_density(aes(L8k, colour = "L8k"), adjust = 15) +
    labs(x = "Decibeli [Db]", y = "Gustoća", colour = NULL, title = "Grafik gustoće vrijednosti audiograma za lijevo uho") +
    xlim(-10, 50);
p1
ggsave("eda-density.png", path = "C:\Users\emina_s\OneDrive\master rad\slike", width = 5)
ggsave("eda-density.png", path = "C:/Users/emina_s/OneDrive/master rad/slike", width = 5)
ggsave("eda-density.png", path = "C:/Users/emina_s/OneDrive/master rad/slike", width = 7)
ggsave("eda-density.png", path = "C:/Users/emina_s/OneDrive/master rad/slike", width = 9, height = 5)
p2 = ggplot(bezOutliera) +
    stat_qq(aes(sample = L500, colour = "L500"), dparams = params1, na.rm = TRUE) +
    stat_qq(aes(sample = L1k, colour = "L1k"), dparams = params3, na.rm = TRUE) +
    stat_qq(aes(sample = L2k, colour = "L2k"), dparams = params4, na.rm = TRUE) +
    stat_qq(aes(sample = L3k, colour = "L3k"), dparams = params5, na.rm = TRUE) +
    stat_qq(aes(sample = L4k, colour = "L4k"), dparams = params6, na.rm = TRUE) +
    stat_qq(aes(sample = L6k, colour = "L6k"), dparams = params7, na.rm = TRUE) +
    stat_qq(aes(sample = L8k, colour = "L8k"), dparams = params8, na.rm = TRUE) +
    labs(x = "Gaussova distribucija", y = "Distribucija uzorka", colour = NULL, title = "Q-Q grafik vrijednosti za lijevo uho");
p2
ggsave("eda-qq-left.png", path = "C:/Users/emina_s/OneDrive/master rad/slike", width = 9, height = 5)
shapiro.test(bezOutliera$L500)
RevoScaleR::rxQuantile("L500",bezOutliera)
RevoScaleR::rxQuantile("L500",    data)
bezOutliera$L500[sample(nrow(bezOutliera$L500), 3),]
typeof(bezOutliera$L500)
sample(bezOutliera$L500, 4999)
sampleForShapiro = sample(bezOutliera$L500, 4999)sample(bezOutliera$L500, 4999)
sampleForShapiro = sample(bezOutliera$L500, 4999)
shapiro.test(sampleForShapiro)
sampleForShapiro = sample(bezOutliera$L500, 5000)
shapiro.test(sampleForShapiro)
sampleForShapiro = sample(bezOutliera$L500, 100)
shapiro.test(sampleForShapiro)
sampleForShapiro = sample(bezOutliera$L500, 5001)
shapiro.test(sampleForShapiro)
sampleForShapiro = sample(bezOutliera$L500, 5000)
shapiro.test(sampleForShapiro)
sampleForShapiro = sample(bezOutliera$L500, 100)
shapiro.test(sampleForShapiro)
ggplot(sampleForShapiro, aes(sampleForShapiro)) + geom_histogram()
data.frame(sampleForShapiro)
names(sampleForShapiro)
names(sampleForShapiro)="sample"
names(sampleForShapiro)
sampleForShapiroDF= data.frame(sampleForShapiro)
head(sampleForShapiroDF)
names(sampleForShapiroDF)="sample"
head(sampleForShapiroDF)
ggplot(sampleForShapiroDF, aes(sample))+geom_histogram()
ggsave("eda-shapiroUzorak.png", "C:/Users/emina_s/OneDrive/master rad/slike", width = 9, height = 5)
ggsave("eda-shapiroUzorak.png", path = "C:/Users/emina_s/OneDrive/master rad/slike", width = 9, height = 5)
ggplot(sampleForShapiroDF, aes(sample)) + geom_histogram() + labs(x = "Uzorak", y = "", title(main = "Distribucija uzorka", sub = "Korištena varijabla: L500"))
ggplot(sampleForShapiroDF, aes(sample)) + geom_histogram() + labs(x = "Uzorak", y = "") + title(main = "Distribucija uzorka", sub = "Korištena varijabla: L500")
ggplot(sampleForShapiroDF, aes(sample)) + geom_histogram() + labs(x = "Uzorak", y = "") + title(main = "Distribucija uzorka", sub = "Korištena varijabla: L500")
ggplot(sampleForShapiroDF, aes(sample)) + geom_histogram() + labs(x = "Uzorak", y = "") + title(main = "Distribucija uzorka", sub = "Korištena varijabla: L500")
ggplot(sampleForShapiroDF, aes(sample)) + geom_histogram() + labs(x = "Uzorak", y = "") + ggtitle(main = "Distribucija uzorka", sub = "Korištena varijabla: L500")
ggplot(sampleForShapiroDF, aes(sample)) + geom_histogram() + labs(x = "Uzorak", y = "") + ggtitle("Distribucija uzorka")
ggplot(sampleForShapiroDF, aes(sample)) + geom_histogram() + labs(x = "Uzorak", y = NULL, title = "Distribucija uzorka", subtitle = "A subtitle")
ggplot(sampleForShapiroDF, aes(sample)) + geom_histogram() + labs(x = "Uzorak", y = NULL, title = "Distribucija uzorka", subtitle = "A subtitle") + ggtitle(subtitle="jj")
packageVersion("ggplot2")
ggplot(sampleForShapiroDF, aes(sample)) + geom_histogram() + labs(x = "Uzorak", y = NULL, title = "Distribucija uzorka")
ggplot(sampleForShapiroDF, aes(sample)) + geom_histogram() + labs(x = "Uzorak", y = NULL, title = "Distribucija uzorka varijable L500")
ggsave("eda-shapiroUzorak.png", path = "C:/Users/emina_s/OneDrive/master rad/slike", width = 9, height = 5)
Revo.version
checkpoint("2016-12-31")
checkpoint::checkpoint("2016-12-31")
3 * (mean(sampleForShapiro) - median(sampleForShapiro)) / sd(sampleForShapiro)
sampleSkew = 3 * (mean(sampleForShapiro) - median(sampleForShapiro)) / sd(sampleForShapiro);
library("e1071")
skewness(sampleForShapiro,na.rm = false,type = 3)
skewness(sampleForShapiro,na.rm = false,type = 1)
skewness(sampleForShapiro,na.rm = false,type = 2)
3 * (mean(sampleForShapiro) - median(sampleForShapiro)) / sd(sampleForShapiro)
skewness(sampleForShapiro,type = 2)
library("PerformanceAnalytics")
skewness(sampleForShapiro,FALSE,"sample")
skewness(sampleForShapiro,FALSE,"fisher")
skewness(sampleForShapiro,FALSE,"moment")
mean(sampleForShapiro)
median(sampleForShapiro)
sd(sampleForShapiro)
skewness(bezOutliera$L500, TRUE, "moment")
ggplot(sampleForShapiroDF,aes(sample))
+ gg_density()
ggplot(sampleForShapiroDF,aes(sample))+geom_density()
sapply(sampleForShapiro, function(x) { if(x>40) NA else x})
sampleForShapiro=sapply(sampleForShapiro, function(x) { if(x>40) NA else x})
summary(sampleForShapiro)
skewness(sampleForShapiro, TRUE, "moment")
bezOutliera2L5 = sapply(bezOutliera$L500, function(x) { if (x > 40) NA else x })
bezOutliera2L5 = sapply(bezOutliera$L500, function(x) { if(is.na(x)) NA else if (x > 40) NA else x })
summary(bezOutliera2L5)
skewness(sampleForShapiro, TRUE, "moment")
skewness(bezOutliera2L5, TRUE, "moment")
kurtosis(bezOutliera$L500, na.rm = TRUE, method = "sample")
kurtosis(bezOutliera2L5, na.rm = TRUE, method = "sample")
shapiro.test(sampleForShapiro)
shapiro.test(sampleForShapiro[1:100])
shapiro.test(sampleForShapiro[1:10])
ggplot(sampleForShapiroDF, aes(sample)) + geom_density()
ggplot(sampleForShapiroDF, aes(sample)) + geom_density(fill="green")
ggplot(sampleForShapiroDF, aes(sample)) + geom_density(fill="green", color="green",alpha=0.1)
ggplot(sampleForShapiroDF, aes(sample)) + geom_density(fill = "green", color = "green", alpha = 0.1) + labs(x="Gustoća", y="Uzorak", title="Grafik gustoće uzorka iz varijable L500")
ggsave("eda-shapiroUzorak2.png", path = "C:/Users/emina_s/OneDrive/master rad/slike", width = 9, height = 5)
ggplot(sampleForShapiroDF, aes(sample)) + geom_density(fill = "green", color = "green", alpha = 0.1)
ggplot(sampleForShapiroDF, aes(sample)) + geom_density(fill = "green", color = "green", alpha = 0.1) + labs(x = "Uzorak", y = "Gustoća", title = "Grafik gustoće uzorka iz varijable L500")
ggsave("eda-shapiroUzorak2.png", path = "C:/Users/emina_s/OneDrive/master rad/slike", width = 9, height = 5)
library(psych)
KMO(lCorr)
n <- nrow(audiograms[1:7])
p <- ncol(audiograms[1:7])
chi2 <- -(n - 1 - (2 * p + 5) / 6) * log(det(lCorr))
ddl <- p * (p - 1) / 2
print(chi2)
print(ddl)
print(pchisq(chi2, ddl, lower.tail = F)) # p-value za provjeru da li je Bartlettov test statistički važan. U ovom slučaju jeste, međutim to je zbog velikog broja varijabli
lCorr
cortest.bartlett(lCorr, n)
print(pchisq(chi2, ddl, lower.tail = F)) # p-value za provjeru da li je Bartlettov test statistički važan. U ovom slučaju jeste, međutim to je zbog velikog broja varijabli
print(ddl)
cortest.bartlett(lCorr, n)
KMO(lCorr) # 0.84 - meritorious
lCorr[1:7,]
lCorr[1:6,]
lCorr[1:6,1:6]
KMO(lCorr[1:6, 1:6]) # 0.84 - meritorious
lcorr
lCorr
pc1 <- principal(lCorr, nfactors = 7, rotate = "none")
length(lCorr)
length(lCorr[1,])
pc1
plot(pc1$values, type = "b")
pc1$va
plot(pc1$values, type = "b") + title("Scree plot")
plot(pc1$values, type = "b") + title("Scree plot", xlab = "Komponenta", ylab = "Eigenvrijednost")
plot(pc1$values, type = "b", xlab=NULL) + title("Scree plot", xlab = "Komponenta", ylab = "Eigenvrijednost")
plot(pc1$values, type = "b")
pc2 <- principal(lCorr, nfactors = 3, rotate = "none")
pc2
0.72+0.16*2
factor.model(pc2$loadings)
factor.residuals(lCorr, pc2$loadings)
lCorr
pc2 <- principal(lCorr, nfactors = 2, rotate = "none")
pc2
pc2 <- principal(lCorr, nfactors = 1, rotate = "none")
pc2
pc3 <- principal(lCorr, nfactors = 3, rotate = "varimax")
pc3
print.psych(pc3, cut = 0.3, sort = TRUE)
print.psych(pc3, cut = 0.4, sort = TRUE)
print.psych(pc3, cut = 0.4, sort = FALSE)
outlier(audiograms)
sum(audiograms$L8k>500)
sum(bezOutliera$L8k>500)
sum(bezOutliera$L8k>500, na.rm = TRUE)
correlation = cor(bezOutliera, use = "complete.obs", method = "pearson")
lCorr = correlation[1:7, 1:7] # za lijevo uho
rCorr = correlation[8:14, 8:14] # za desno uho
KMO(lCorr) # 0.84 - meritorious
det(correlation[1:7, 1:7]) # 0.001021131, > 0.00001
pc1 <- principal(lCorr, nfactors = length(lCorr[1,]), rotate = "none") # na početku br faktora je jednak broju varijabli
plot(pc1$values, type = "b") # scree plot
pc1
pc1 <- principal(lCorr, nfactors = 3, rotate = "varimax" ) # na početku br faktora je jednak broju varijabli
pc1 <- principal(lCorr, nfactors = 3, rotate = "varimax", n.obs = length(bezOutliera$L1k), missing = TRUE ) # na početku br faktora je jednak broju varijabli
pc1
plot(pc1$values, type = "b") # scree plot
print.psych(pc1, cut = 0.4, sort = FALSE)
print.psych(pc1, cut = 0.4, sort = TRUE)
pc4 <- principal(raqData, nfactors = 3, rotate = "oblimin")
pc4 <- principal(lCorr, nfactors = 3, rotate = "oblimin")
pc4 <- principal(lCorr, nfactors = 3, rotate = "oblimin")
print.psych(pc4, cut = 0.4, sort = TRUE)
pc4 <- principal(lCorr, nfactors = 3, rotate = "oblimin", n.obs = length(audiograms$L1k), missing = TRUE)
print.psych(pc4, cut = 0.4, sort = TRUE)
head(pc4$Scores)
pc4 <- principal(lCorr, nfactors = 3, rotate = "oblimin", n.obs = length(audiograms$L1k), missing = TRUE, scores = TRUE)
head(pc4$Scores)
pc4$factors
pc4$values
res <- prcomp(audiograms[1:7], center = TRUE, scale = FALSE)
res
head(res$x)
plot(cumsum(res$sdev ^ 2 / sum(res$sdev ^ 2)))
library("FactoMineR")
library("factoextra")
library("factoextra")
library("factoextra")
library("factoextra")
library("factoextra")
library("factoextra")
library("mvnorm")
detach('ggpubr',unload = TRUE)
detach("ggpubr",unload = TRUE)
detach("package:ggpubr",unload = TRUE)
detach("package:fBasics",unload = TRUE)
detach("package:e1071",unload = TRUE)
library("FactoMineR")
library("factoextra")
rm(bezOutliera2L5, envir = as.environment(".GlobalEnv"))
sum(bezOutliera$L8k == NA)
sum(is.na(bezOutliera$L8k))
length(bezOutliera$L8k) - sum(is.na(bezOutliera$L8k))
length(bezOutliera$L8k) / sum(is.na(bezOutliera$L8k)) *100
sum(is.na(bezOutliera$L8k)) / length(bezOutliera$L8k) * 100
round(sum(is.na(bezOutliera$L8k)) / length(bezOutliera$L8k) * 100,2)
noOutliers=bezOutliera
rm(bezOutliera, envir = as.environment(".GlobalEnv"))
na_count <- sapply(x, function(y) sum(length(which(is.na(y)))))
na_count <- sapply(audiograms, function(y) sum(length(which(is.na(y)))))
na_count=data.frame(na_count)
na_count
na_count <- sapply(noOutliers, function(y) sum(length(which(is.na(y)))))
na_count=data.frame(na_count)
na_count
ggplot(na_count, aes(na_count)) + geom_histogram(stat = "identitz")
ggplot(na_count, aes(na_count)) + geom_histogram(stat = "identity")
ggplot(na_count, aes(na_count)) + geom_bar(stat = "identity")
PCA
pca.res=PCA(noOutliers)
library(missMDA)
imputePCA(noOutliers)
imputedOutliers=imputePCA(noOutliers)
pca.res = PCA(imputedOutliers)
library("RevoScaleR")
library("ggplot2")
library("FactoMineR")
library("factoextra")
library("ellipse")
library("PerformanceAnalytics")
library("psych")
library("ggplot2")
detach("package:psych",unload = TRUE)
library("ggplot2")
connStr <- "Driver=SQL Server;Server=localhost;Database=ohl_data;Trusted_Connection = Yes" # win auth
sqlShareDir <- paste("D:\\R_SerializationDir\\", Sys.getenv("USERNAME"), sep = "")
sqlWait <- TRUE
sqlConsoleOutput <- FALSE
cc <- RxInSqlServer(connectionString = connStr, shareDir = sqlShareDir, wait = sqlWait, consoleOutput = sqlConsoleOutput)
rxSetComputeContext(cc)
sql = "SELECT * FROM OHLData";
data = RxSqlServerData(sqlQuery = sql, connectionString = connStr, rowsPerRead = 5000)
dataset = rxImport(data);
rm(df, envir = as.environment(".GlobalEnv"))
audiograms = lapply(dataset[, 9:22], function(x) as.numeric(as.character(x)));
audiograms = data.frame(audiograms);
correlation = cor(audiograms, use = "everything", method = "pearson")
lCorr = correlation[1:7, 1:7] # za lijevo uho
rCorr = correlation[8:14, 8:14] # za desno uho
noOutliers = data.frame(lapply(audiograms, function(x) { sapply(x, function(y) { if (y > 500) y = NA else y }) }))
library(missMDA)
na_count <- sapply(noOutliers, function(y) sum(length(which(is.na(y)))))
na_count = data.frame(na_count)
na_count
imputedOutliers=imputePCA(noOutliers)
head(dataset)
head(dataset[,9:22])
head(dataset[,9:28])
head(dataset[length(dataset$L1k)*0.7,9:22])
head(dataset[1:length(dataset$L1k)*0.7,9:22])
head(dataset[1:length(dataset$L1k)*0.7,9:28])
data=dataset[1:length(dataset$L1k)*0.7,9:28]
summary(data)
length(dataset$L1k) * 0.7
data=dataset[1:floor(length(dataset$L1k)*0.7),9:28]
summary(data)
head(data)
head(data[,1:14])
data[, 1:14] = data.frame(lapply(data[, 1:14], function(x) { sapply(x, function(y) { if (y > 500) y = NA else y }) }))
head(data)
